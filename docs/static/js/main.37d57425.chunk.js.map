{"version":3,"sources":["components/Button.tsx","components/Input.tsx","Container/Images.tsx","Container/Pagination.tsx","Container/service.ts","Container/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","children","Input","React","value","setValue","onChange","e","target","Images","childElements","data","map","images","id","title","url","downsized","alt","width","height","src","Pagination","totalCount","offset","limit","onChangePage","amountOfPages","Math","floor","currentPages","onClick","api","axios","create","params","api_key","getGif","q","get","AppContainer","state","searchQuery","onClickHandler","a","setState","fetchData","resp","pagination","total_count","error","onChangeHandler","type","this","length","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37d57425.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst Button: React.FC<\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n> = props => (\n  <button {...props} className=\"button\">\n    {props.children}\n  </button>\n);\n\nexport default Button;\n","import * as React from 'react';\n\nconst Input: React.FC<React.InputHTMLAttributes<HTMLInputElement>> = props => {\n  const [value, setValue] = React.useState<string>('');\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof props.onChange === 'function') {\n      props.onChange(e);\n    }\n\n    setValue(e.target.value);\n  };\n\n  return (\n    <input\n      {...props}\n      onChange={onChangeHandler}\n      value={value}\n      className=\"input\"\n    />\n  );\n};\n\nexport default Input;\n","import * as React from 'react';\nimport giphyApi from 'giphy-api';\nimport MasonryComponent from 'react-masonry-component';\n\nconst Images: React.FC<{ data: giphyApi.GIFObject[] }> = ({ data }) => {\n  const childElements = data.map(({ images, id, title }) => {\n    const {\n      downsized: { url },\n    } = images;\n\n    return (\n      <img key={id} alt={title} id={id} width={300} height=\"auto\" src={url} />\n    );\n  });\n  return (\n    <div>\n      <MasonryComponent className=\"masonry-component\">\n        {childElements}\n      </MasonryComponent>\n    </div>\n  );\n};\nexport default Images;\n","import * as React from 'react';\n\nconst Pagination: React.FC<{\n  totalCount: number;\n  offset: number;\n  limit: number;\n  onChangePage: (type: 'prev' | 'next') => void;\n}> = ({ totalCount, offset, limit, onChangePage }) => {\n  const amountOfPages = Math.floor(totalCount / limit);\n  const currentPages =\n    amountOfPages - Math.floor((totalCount - offset) / limit) + 1;\n\n  return (\n    <div className=\"pagination\">\n      <p className=\"pagination__title\">Total amount of pages {amountOfPages}</p>\n      <p className=\"pagination__title\">Current Page is {currentPages}</p>\n      <div className=\"pagination__buttons\">\n        <button\n          className=\"button pagination__button\"\n          onClick={() => onChangePage('prev')}\n        >\n          prev page\n        </button>\n        <button\n          className=\"button pagination__button\"\n          onClick={() => onChangePage('next')}\n        >\n          next page\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import axios from 'axios';\nimport { GetGif } from './types';\n\n const api_key = \"ARj6kkjzPc9285bIbHEzN6p2SU2dghPX\";\n\nconst api = axios.create({\n    params: { api_key }\n})\n\n/**\n * @param {string} q - search query.\n * @param {number} offset - starting position of the results.\n * @param {number} limit - The maximum number of objects\n */\nexport const getGif: GetGif = (q, offset, limit) => api.get('https://api.giphy.com/v1/gifs/search', {\n    params: {\n        q,\n        offset,\n        limit\n    }\n})\n\n\n","import * as React from 'react';\nimport Button from '../components/Button';\nimport Input from '../components/Input';\nimport Images from './Images';\nimport Pagination from './Pagination';\nimport { getGif } from './service';\nimport { IState } from './types';\n\nclass AppContainer extends React.Component {\n  state: IState = {\n    offset: 0,\n    totalCount: 0,\n    limit: 25,\n    searchQuery: '',\n    images: [],\n  };\n\n  onClickHandler = async () => {\n    this.setState(\n      {\n        offset: 0,\n        totalCount: 0,\n      },\n      () => this.fetchData(),\n    );\n  };\n\n  fetchData = async () => {\n    try {\n      const { searchQuery, limit, offset } = this.state;\n      const resp = await getGif(searchQuery, offset, limit);\n      const { data, pagination } = resp.data;\n\n      this.setState({\n        totalCount: pagination.total_count,\n        images: data,\n      });\n    } catch {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n\n  onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchQuery: e.target.value });\n  };\n\n  onChangePage = (type: 'prev' | 'next') => {\n    const { offset, limit, totalCount } = this.state;\n    if (type === 'prev') {\n      if (offset - limit >= 0) {\n        this.setState(\n          {\n            offset: offset - limit,\n          },\n          () => this.fetchData(),\n        );\n      }\n    } else {\n      if (offset + limit < totalCount) {\n        this.setState(\n          {\n            offset: offset + limit,\n          },\n          () => this.fetchData(),\n        );\n      }\n    }\n  };\n\n  render() {\n    const { images, totalCount, offset, limit, error } = this.state;\n    if (error) {\n      return <p className=\"error-title\">Something when wrong</p>;\n    }\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"main-title\">Try to find gifs</h1>\n        <div className=\"container-top-row\">\n          <div className=\"container__search-row\">\n            <Input onChange={this.onChangeHandler} />\n            <Button onClick={this.onClickHandler}>Search gif</Button>\n          </div>\n        </div>\n        {!!images.length && (\n          <Pagination\n            onChangePage={this.onChangePage}\n            totalCount={totalCount}\n            offset={offset}\n            limit={limit}\n          />\n        )}\n        <Images data={images} />\n      </div>\n    );\n  }\n}\n\nexport default AppContainer;\n","import * as React from 'react';\n\nimport './reset.css';\nimport './App.css';\nimport Container from './Container';\n\nfunction App() {\n  return (\n    <div>\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}